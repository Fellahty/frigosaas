import React, { useEffect, useState, useCallback } from 'react';
import ReactECharts from 'echarts-for-react';
import { mqttLiveService, SensorData as MQTTSensorData } from '../lib/mqtt-live';

// Utility function to calculate time ago
const getTimeAgo = (timestamp: Date): string => {
  const now = new Date();
  const diffInSeconds = Math.floor((now.getTime() - timestamp.getTime()) / 1000);
  
  if (diffInSeconds < 60) {
    return `il y a ${diffInSeconds} seconde${diffInSeconds > 1 ? 's' : ''}`;
  }
  
  const diffInMinutes = Math.floor(diffInSeconds / 60);
  if (diffInMinutes < 60) {
    return `il y a ${diffInMinutes} minute${diffInMinutes > 1 ? 's' : ''}`;
  }
  
  const diffInHours = Math.floor(diffInMinutes / 60);
  if (diffInHours < 24) {
    return `il y a ${diffInHours} heure${diffInHours > 1 ? 's' : ''}`;
  }
  
  const diffInDays = Math.floor(diffInHours / 24);
  if (diffInDays < 7) {
    return `il y a ${diffInDays} jour${diffInDays > 1 ? 's' : ''}`;
  }
  
  const diffInWeeks = Math.floor(diffInDays / 7);
  if (diffInWeeks < 4) {
    return `il y a ${diffInWeeks} semaine${diffInWeeks > 1 ? 's' : ''}`;
  }
  
  const diffInMonths = Math.floor(diffInDays / 30);
  return `il y a ${diffInMonths} mois`;
};

interface SensorData {
  timestamp: number;
  temperature: number;
  humidity: number;
  battery: number;
  magnet: number; // 0 = open, 1 = closed (magnet sensor: false=open, true=closed)
}

interface SensorChartProps {
  sensorId: string;
  sensorName: string;
  isOpen: boolean;
  onClose: () => void;
}

const SensorChart: React.FC<SensorChartProps> = ({ sensorId, sensorName, isOpen, onClose }) => {
  const [data, setData] = useState<SensorData[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isLiveMode, setIsLiveMode] = useState(false);
  const [mqttConnected, setMqttConnected] = useState(false);
  const [isInitialLoad, setIsInitialLoad] = useState(true);
  
  // Date range state - default to last 30 minutes
  const [dateRange, setDateRange] = useState(() => {
    const now = new Date();
    const thirtyMinutesAgo = new Date(now.getTime() - 30 * 60 * 1000);
    return {
      start: thirtyMinutesAgo.toISOString().split('T')[0],
      end: now.toISOString().split('T')[0],
      type: '30min' // Track the selected range type
    };
  });

  // Cache for API responses to avoid unnecessary requests
  const [cache, setCache] = useState<Map<string, { data: SensorData[], timestamp: number }>>(new Map());
  const CACHE_DURATION = 30000; // 30 seconds cache

  // Quick date range functions
  const setQuickRange = (days: number, type: string) => {
    const now = new Date();
    const startDate = new Date(now.getTime() - days * 24 * 60 * 60 * 1000);
    setDateRange({
      start: startDate.toISOString().split('T')[0],
      end: now.toISOString().split('T')[0],
      type: type
    });
  };

  // Set last 30 minutes
  const setLast30Minutes = () => {
    const now = new Date();
    const thirtyMinutesAgo = new Date(now.getTime() - 30 * 60 * 1000);
    setDateRange({
      start: thirtyMinutesAgo.toISOString().split('T')[0],
      end: now.toISOString().split('T')[0],
      type: '30min'
    });
  };

  // Helper function to check if a specific range is selected
  const isRangeSelected = (type: string) => {
    return dateRange.type === type;
  };

  const fetchSensorData = useCallback(async (forceRefresh = false) => {
    // Generate cache key based on date range
    const cacheKey = `${dateRange.start}-${dateRange.end}-${dateRange.type}`;
    const now = Date.now();
    
    console.log('üîç [SensorChart] Starting data fetch...', {
      dateRange,
      cacheKey,
      forceRefresh,
      sensorId
    });
    
    // Check cache first (unless force refresh)
    if (!forceRefresh) {
      const cached = cache.get(cacheKey);
      if (cached && (now - cached.timestamp) < CACHE_DURATION) {
        console.log('üì¶ [SensorChart] Using cached data:', cached.data.length, 'items');
        setData(cached.data);
        return;
      }
    }

    setLoading(true);
    setError(null);
    
    try {
      // For all ranges, use messages endpoint to get historical data
      let apiUrl = 'https://flespi.io/gw/devices/6925665/messages';
      
      if (dateRange.type === '30min') {
        // For 30 minutes, get more recent messages
        apiUrl += '?limit=30';
      } else {
        // For time-based ranges, use date filtering
        const startTime = Math.floor(new Date(dateRange.start).getTime() / 1000);
        const endTime = Math.floor(new Date(dateRange.end + 'T23:59:59').getTime() / 1000);
        apiUrl += `?filter=timestamp>${startTime}%20and%20timestamp<${endTime}`;
      }

      console.log('üåê [SensorChart] API URL:', apiUrl);
      
      const response = await fetch(apiUrl, {
        headers: {
          'Authorization': 'FlespiToken HLjLOPX7XObF3D6itPYgFmMP0Danfjg49eUofKdSwjyGY3hAKeBYkp7LC45Pznyj'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const rawData = await response.json();
      
      console.log('üìä [SensorChart] Raw API response:', rawData);
      console.log('üìä [SensorChart] Raw data result array length:', rawData.result?.length || 0);
      
      // Optimize data processing with early returns and better filtering
      if (!rawData.result || !Array.isArray(rawData.result)) {
        console.log('‚ùå [SensorChart] No valid result array in API response');
        setData([]);
        return;
      }

      // Process data more efficiently with single pass
      const uniqueTimestamps = new Map<number, SensorData>();
      
      console.log('üîÑ [SensorChart] Processing', rawData.result.length, 'raw data items...');
      
      // Filter messages that have BOTH temperature AND humidity (like Python script)
      let validMessages = rawData.result.filter((item: any) => 
        item['ble.sensor.temperature.1'] !== undefined && 
        item['ble.sensor.humidity.1'] !== undefined
      );

      // For 30min range, filter to last 30 minutes
      if (dateRange.type === '30min') {
        const now = new Date();
        const thirtyMinutesAgo = new Date(now.getTime() - (30 * 60 * 1000));
        const thirtyMinutesAgoTimestamp = Math.floor(thirtyMinutesAgo.getTime() / 1000); // Convert to Unix timestamp
        
        validMessages = validMessages.filter((item: any) => {
          const messageTimestamp = item.timestamp; // Already in Unix timestamp format
          return messageTimestamp >= thirtyMinutesAgoTimestamp;
        });
        console.log('üìä [SensorChart] Filtered to last 30 minutes:', validMessages.length, 'messages');
        console.log('üìä [SensorChart] Time range:', {
          now: now.toISOString(),
          thirtyMinutesAgo: thirtyMinutesAgo.toISOString(),
          thirtyMinutesAgoTimestamp
        });
      }
      
      console.log('üìä [SensorChart] Valid messages with both temp & humidity:', validMessages.length, 'out of', rawData.result.length);
      
      if (validMessages.length === 0) {
        console.log('‚ùå [SensorChart] No messages found with both temperature and humidity data');
        setData([]);
        return;
      }

      // Sort by timestamp to get the newest messages first (like Python script)
      const sortedMessages = validMessages.sort((a: any, b: any) => {
        const timestampA = a.timestamp || 0;
        const timestampB = b.timestamp || 0;
        return timestampB - timestampA; // Newest first
      });

      console.log('üïí [SensorChart] Sorted messages by timestamp (newest first)');
      console.log('üìÖ [SensorChart] First message timestamp:', new Date(sortedMessages[0].timestamp * 1000).toISOString());
      console.log('üìÖ [SensorChart] Last message timestamp:', new Date(sortedMessages[sortedMessages.length - 1].timestamp * 1000).toISOString());
      
      for (let i = 0; i < sortedMessages.length; i++) {
        const item = sortedMessages[i];
        
        // Log first few items for debugging
        if (i < 3) {
          console.log(`üìã [SensorChart] Valid item ${i}:`, item);
        }
        
        const temp = item['ble.sensor.temperature.1'];
        const humidity = item['ble.sensor.humidity.1'];
        const battery = item['battery.voltage'];
        const magnet = item['ble.sensor.magnet.status.1'];
        
        console.log(`üîç [SensorChart] Item ${i} values:`, {
          temp,
          humidity,
          battery,
          magnet,
          timestamp: item.timestamp
        });
        
        // Both temperature and humidity should be valid now
        if (temp === undefined || humidity === undefined || 
            parseFloat(temp) <= 0 || parseFloat(humidity) <= 0) {
          console.log(`‚è≠Ô∏è [SensorChart] Skipping item ${i} - invalid data:`, { temp, humidity });
          continue;
        }

        // Handle magnet sensor value (can be boolean or number)
        let magnetValue = 0;
        const magnetData = item['ble.sensor.magnet.status.1'];
        if (magnetData !== undefined && magnetData !== null) {
          if (typeof magnetData === 'boolean') {
            magnetValue = magnetData ? 1 : 0;
          } else {
            magnetValue = parseFloat(magnetData) || 0;
          }
        }

         const sensorData: SensorData = {
           timestamp: new Date(item.timestamp * 1000).getTime(),
           temperature: parseFloat(temp),
           humidity: parseFloat(humidity), // Both temp and humidity are guaranteed to exist
           battery: parseFloat(item['battery.voltage']) || 0,
           magnet: magnetValue
         };

        // Handle duplicates during processing
        const existing = uniqueTimestamps.get(sensorData.timestamp);
        if (!existing || sensorData.battery > existing.battery) {
          uniqueTimestamps.set(sensorData.timestamp, sensorData);
        }
      }

       // Convert to array and sort efficiently
       let finalData = Array.from(uniqueTimestamps.values());
       
       // Sort by timestamp descending (newest first) for limit application
       finalData.sort((a, b) => b.timestamp - a.timestamp);

       // Apply limit for 30 minutes option (show last 30 minutes of data)
       if (dateRange.type === '30min') {
         const thirtyMinutesAgo = Date.now() - (30 * 60 * 1000);
         finalData = finalData.filter(item => item.timestamp >= thirtyMinutesAgo);
       }

       // Final sort for chart display (ascending - oldest to newest for chart)
       finalData.sort((a, b) => a.timestamp - b.timestamp);

       console.log('‚úÖ [SensorChart] Final processed data:', finalData);
       console.log('üìà [SensorChart] Data summary:', {
         totalItems: finalData.length,
         temperatureRange: finalData.length > 0 ? {
           min: Math.min(...finalData.map(d => d.temperature)),
           max: Math.max(...finalData.map(d => d.temperature))
         } : 'N/A',
         humidityRange: finalData.length > 0 ? {
           min: Math.min(...finalData.map(d => d.humidity)),
           max: Math.max(...finalData.map(d => d.humidity))
         } : 'N/A',
         validHumidityCount: finalData.filter(d => d.humidity > 0).length,
         timeRange: finalData.length > 0 ? {
           start: new Date(finalData[0].timestamp).toISOString(),
           end: new Date(finalData[finalData.length - 1].timestamp).toISOString()
         } : 'N/A'
       });

       // Cache the result
       setCache(prev => {
         const newCache = new Map(prev);
         newCache.set(cacheKey, { data: finalData, timestamp: now });
         return newCache;
       });

       setData(finalData);
    } catch (err) {
      console.error('‚ùå [SensorChart] Error fetching sensor data:', err);
      console.error('‚ùå [SensorChart] Error details:', {
        name: err instanceof Error ? err.name : 'Unknown',
        message: err instanceof Error ? err.message : 'Unknown error',
        stack: err instanceof Error ? err.stack : 'No stack trace'
      });
      
      if (err instanceof Error && err.name === 'AbortError') {
        console.log('‚è∞ [SensorChart] Request was aborted (timeout)');
        setError('Request timeout - please try again');
      } else {
        console.log('üí• [SensorChart] Setting error message:', err instanceof Error ? err.message : 'Failed to fetch sensor data');
        setError(err instanceof Error ? err.message : 'Failed to fetch sensor data');
      }
      setData([]);
    } finally {
      console.log('üèÅ [SensorChart] Data fetch completed, setting loading to false');
      setLoading(false);
      setIsInitialLoad(false);
    }
  }, [cache, dateRange]);

  // Debounced refresh function
  const [refreshTimeout, setRefreshTimeout] = useState<NodeJS.Timeout | null>(null);
  const debouncedRefresh = useCallback(() => {
    if (refreshTimeout) {
      clearTimeout(refreshTimeout);
    }
    const timeout = setTimeout(() => {
      fetchSensorData(true);
    }, 300); // 300ms debounce
    setRefreshTimeout(timeout);
  }, [refreshTimeout, fetchSensorData]);

  // MQTT Live data handling - REACTIVATED with correct configuration
  useEffect(() => {
    if (isOpen && isLiveMode) {
      console.log('üîå [SensorChart] Starting MQTT live mode for sensor:', sensorId);
      
      // Connect to MQTT if not already connected
      if (!mqttConnected) {
        console.log('üîå [SensorChart] Attempting MQTT connection...');
        
        // Set a timeout for MQTT connection
        const mqttTimeout = setTimeout(() => {
          console.log('‚è∞ [SensorChart] MQTT connection timeout, falling back to API mode');
          setIsLiveMode(false);
          setError('MQTT connection timeout, using historical data instead');
        }, 10000); // 10 seconds timeout

        mqttLiveService.connect()
          .then(() => {
            clearTimeout(mqttTimeout);
            console.log('‚úÖ [SensorChart] MQTT connected successfully');
            setMqttConnected(true);
            setError(null); // Clear any previous errors
            
            // Load historical data only after MQTT connection is established
            console.log('üìä [SensorChart] Loading historical data as baseline for live mode...');
            fetchSensorData(false);
          })
          .catch((err) => {
            clearTimeout(mqttTimeout);
            console.error('‚ùå [SensorChart] MQTT connection failed:', err);
            console.log('üîÑ [SensorChart] Falling back to API mode');
            setIsLiveMode(false);
            setError('MQTT connection failed, using historical data instead');
          });
      }

      // Subscribe to sensor data
      const unsubscribe = mqttLiveService.onSensorData((sensorData: MQTTSensorData) => {
        console.log('üìä [SensorChart] Received live sensor data:', sensorData);
        
        // Convert MQTT data to our format
        const convertedData: SensorData = {
          timestamp: sensorData.timestamp,
          temperature: sensorData.temperature,
          humidity: sensorData.humidity,
          battery: sensorData.battery,
          magnet: sensorData.magnet
        };

        // Add to existing data (combine historical + live data)
        setData(prevData => {
          // Check if this data point already exists (avoid duplicates)
    /*       const exists = prevData.some(item => 
            Math.abs(item.timestamp - convertedData.timestamp) < 5000 && // Within 5 seconds
            Math.abs(item.temperature - convertedData.temperature) < 0.1 && // Same temperature
            Math.abs(item.humidity - convertedData.humidity) < 0.1 // Same humidity
          ); 
          
          if (exists) {
            console.log('üìä [SensorChart] Duplicate data point detected, skipping:', {
              timestamp: new Date(convertedData.timestamp).toISOString(),
              temperature: convertedData.temperature,
              humidity: convertedData.humidity
            });
            return prevData;
          }*/
          
          console.log('üìä [SensorChart] Adding new live data point:', {
            timestamp: new Date(convertedData.timestamp).toISOString(),
            temperature: convertedData.temperature,
            humidity: convertedData.humidity
          });
          
          // Add new data and keep last 100 points for better visualization
          const newData = [...prevData, convertedData];
          return newData; // Keep last 100 points
        });
      });

      return () => {
        console.log('üîå [SensorChart] Unsubscribing from MQTT data');
        unsubscribe();
      };
    }
  }, [isOpen, isLiveMode, sensorId, mqttConnected]);

  useEffect(() => {
    if (isOpen && !isLiveMode) {
      console.log('üöÄ [SensorChart] Modal opened, fetching historical data for sensor:', sensorId);
      console.log('üîó [SensorChart] API Endpoint: https://flespi.io/gw/devices/6925665/messages');
      console.log('üîë [SensorChart] Token: FlespiToken HLjLOPX7XObF3D6itPYgFmMP0Danfjg49eUofKdSwjyGY3hAKeBYkp7LC45Pznyj');
      fetchSensorData(false); // Use cache when modal opens
    }
  }, [isOpen, sensorId, dateRange, fetchSensorData, isLiveMode]);

  // Temperature chart configuration
  const temperatureChartOption = {
    backgroundColor: 'transparent',
    title: [
      {
        text: 'Temp√©rature',
        left: 'center',
        top: 5,
        textStyle: {
          color: '#EF4444',
          fontSize: 12,
          fontWeight: 'bold'
        }
      }
    ],
    tooltip: {
      trigger: 'axis',
      axisPointer: {
        type: 'cross',
        crossStyle: {
          color: '#999'
        }
      },
      formatter: function(params: any) {
        if (!params || params.length === 0) return '';
        
        const point = params[0];
        const date = new Date(point.data[0]);
        const time = date.toLocaleString('fr-FR', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit'
        });
        const value = point.data[1].toFixed(1);
        const movementStatus = point.data[2] || 0;
        
        return `
          <div style="padding: 8px;">
            <div style="font-weight: bold; color: #EF4444; margin-bottom: 6px; font-size: 14px;">Temp√©rature</div>
            <div style="font-size: 14px; margin-bottom: 2px;"><strong>${time}</strong></div>
            <div style="font-size: 16px; margin-bottom: 4px;">${point.marker} <strong>${value}¬∞C</strong></div>
            <div style="font-size: 12px; color: #9333EA;">${movementStatus === 1 ? 'üîí Port Ferm√©' : 'üîì Port Ouvert'}</div>
          </div>
        `;
      }
    },
    grid: {
      left: '5%',
      right: '5%',
      bottom: '25%',
      top: '12%',
      containLabel: true
    },
    xAxis: {
      type: 'time',
      axisLine: {
        lineStyle: {
          color: '#E5E7EB'
        }
      },
      axisLabel: {
        color: '#6B7280',
        fontSize: 10,
        rotate: 45,
        interval: 'auto', // Affichage automatique optimis√©
        formatter: function(value: number) {
          const date = new Date(value);
          return date.toLocaleTimeString('fr-FR', { 
            hour: '2-digit', 
            minute: '2-digit' 
          });
        }
      },
  
    },
    yAxis: {
      type: 'value',
      name: 'Temp√©rature (¬∞C)',
      nameTextStyle: {
        color: '#EF4444'
      },
      axisLine: {
        lineStyle: {
          color: '#EF4444'
        }
      },
      splitLine: {
        show: true,
        lineStyle: {
          color: '#E5E7EB',
          type: 'dashed',
          width: 1
        }
      },
      splitNumber: 4
    },
      axisLabel: {
        color: '#EF4444',
        formatter: '{value}¬∞C'
      },
      splitLine: {
        lineStyle: {
          color: '#FEE2E2'
        }
      },
      axisPointer: {
        snap: true,
        lineStyle: {
          color: '#999',
          type: 'dashed',
          width: 1
        },
        handle: {
          show: false,
          color: '#999'
        }
      }
    },
    series: [
      {
        name: 'Temp√©rature',
        type: 'line',
        data: data.map(d => [d.timestamp, d.temperature, d.magnet]),
        smooth: true,
        lineStyle: {
          width: 3,
          color: {
            type: 'linear',
            x: 0, y: 0, x2: 1, y2: 0,
            colorStops: [
              { offset: 0, color: '#F97316' },
              { offset: 1, color: '#EF4444' }
            ]
          }
        },
        itemStyle: {
          color: '#EF4444'
        },
        areaStyle: {
          color: {
            type: 'linear',
            x: 0, y: 0, x2: 0, y2: 1,
            colorStops: [
              { offset: 0, color: 'rgba(239, 68, 68, 0.3)' },
              { offset: 1, color: 'rgba(239, 68, 68, 0.05)' }
            ]
          }
        },
        symbol: 'circle',
        symbolSize: 4,
        emphasis: {
          itemStyle: {
            color: '#DC2626',
            borderColor: '#fff',
            borderWidth: 2
          }
        }
      },
      // Port status as stacked bar chart
      {
        name: 'Port Ferm√©',
        type: 'bar',
        data: data.map(d => [d.timestamp, d.magnet === 1 ? 1 : 0]),
        itemStyle: {
          color: '#10B981',
          opacity: 0.7
        },
        stack: 'port',
        barWidth: '80%',
        tooltip: {
          formatter: function(params: any) {
            if (params.data[1] === 0) return '';
            const date = new Date(params.data[0]);
            const time = date.toLocaleString('fr-FR', { 
              day: '2-digit', 
              month: '2-digit', 
              year: 'numeric', 
              hour: '2-digit', 
              minute: '2-digit',
              second: '2-digit'
            });
            return `üîí Port Ferm√©<br/>${time}`;
          }
        }
      },
      {
        name: 'Port Ouvert',
        type: 'bar',
        data: data.map(d => [d.timestamp, d.magnet === 0 ? 1 : 0]),
        itemStyle: {
          color: '#EF4444',
          opacity: 0.7
        },
        stack: 'port',
        barWidth: '80%',
        tooltip: {
          formatter: function(params: any) {
            if (params.data[1] === 0) return '';
            const date = new Date(params.data[0]);
            const time = date.toLocaleString('fr-FR', { 
              day: '2-digit', 
              month: '2-digit', 
              year: 'numeric', 
              hour: '2-digit', 
              minute: '2-digit',
              second: '2-digit'
            });
            return `üîì Port Ouvert<br/>${time}`;
          }
        }
      }
    ],
    // Timeline and zoom features for temperature
    dataZoom: [
      {
        type: 'slider',
        show: true,
        xAxisIndex: [0],
        start: 0,
        end: 100,
        height: 20,
        bottom: 15,
        backgroundColor: 'rgba(255, 255, 255, 0.8)',
        borderColor: '#E5E7EB',
        fillerColor: 'rgba(239, 68, 68, 0.2)',
        handleStyle: {
          color: '#EF4444',
          borderColor: '#EF4444'
        },
        textStyle: {
          color: '#6B7280',
          fontSize: 10
        }
      },
      {
        type: 'inside',
        xAxisIndex: [0],
        start: 0,
        end: 100
      }
    ]
  };

  // Humidity chart configuration
  const humidityChartOption = {
    backgroundColor: 'transparent',
    title: [
      {
        text: 'Humidit√©',
        left: 'center',
        top: 5,
        textStyle: {
          color: '#3B82F6',
          fontSize: 12,
          fontWeight: 'bold'
        }
      }
    ],
    tooltip: {
      trigger: 'axis',
      axisPointer: {
        type: 'cross',
        crossStyle: {
          color: '#999'
        }
      },
      formatter: function(params: any) {
        if (!params || params.length === 0) return '';
        
        const point = params[0];
        const date = new Date(point.data[0]);
        const time = date.toLocaleString('fr-FR', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit'
        });
        const value = point.data[1];
        const movementStatus = point.data[2] || 0;
        
        return `
          <div style="padding: 8px;">
            <div style="font-weight: bold; color: #3B82F6; margin-bottom: 6px; font-size: 14px;">Humidit√©</div>
            <div style="font-size: 14px; margin-bottom: 2px;"><strong>${time}</strong></div>
            <div style="font-size: 16px; margin-bottom: 4px;">${point.marker} <strong>${value > 0 ? value.toFixed(1) + '%' : 'N/A'}</strong></div>
            <div style="font-size: 12px; color: #9333EA;">${movementStatus === 1 ? 'üîí Port Ferm√©' : 'üîì Port Ouvert'}</div>
          </div>
        `;
      }
    },
    grid: {
      left: '5%',
      right: '5%',
      bottom: '25%',
      top: '12%',
      containLabel: true
    },
    xAxis: {
      type: 'time',
      axisLine: {
        lineStyle: {
          color: '#E5E7EB'
        }
      },
      axisLabel: {
        color: '#6B7280',
        fontSize: 10,
        rotate: 45,
        interval: 'auto', // Affichage automatique optimis√©
        formatter: function(value: number) {
          const date = new Date(value);
          return date.toLocaleTimeString('fr-FR', { 
            hour: '2-digit', 
            minute: '2-digit' 
          });
        }
      },
      splitLine: {
        show: true,
        lineStyle: {
          color: '#F3F4F6',
          type: 'dashed'
        }
      }
    },
    yAxis: {
      type: 'value',
      name: 'Humidit√© (%)',
      nameTextStyle: {
        color: '#3B82F6'
      },
      axisLine: {
        lineStyle: {
          color: '#3B82F6'
        }
      },
      splitLine: {
        show: true,
        lineStyle: {
          color: '#E5E7EB',
          type: 'dashed',
          width: 1
        }
      },
      splitNumber: 4
    },
      axisLabel: {
        color: '#3B82F6',
        formatter: '{value}%'
      },
      splitLine: {
        lineStyle: {
          color: '#DBEAFE'
        }
      },
      axisPointer: {
        snap: true,
        lineStyle: {
          color: '#999',
          type: 'dashed',
          width: 1
        },
        handle: {
          show: false,
          color: '#999'
        }
      }
    },
    series: [
       {
         name: 'Humidit√©',
         type: 'line',
         data: data.map(d => [d.timestamp, d.humidity, d.magnet]),
        smooth: true,
        lineStyle: {
          width: 3,
          color: {
            type: 'linear',
            x: 0, y: 0, x2: 1, y2: 0,
            colorStops: [
              { offset: 0, color: '#06B6D4' },
              { offset: 1, color: '#3B82F6' }
            ]
          }
        },
        itemStyle: {
          color: '#3B82F6'
        },
        areaStyle: {
          color: {
            type: 'linear',
            x: 0, y: 0, x2: 0, y2: 1,
            colorStops: [
              { offset: 0, color: 'rgba(59, 130, 246, 0.3)' },
              { offset: 1, color: 'rgba(59, 130, 246, 0.05)' }
            ]
          }
        },
        symbol: 'circle',
        symbolSize: 4,
        emphasis: {
          itemStyle: {
            color: '#2563EB',
            borderColor: '#fff',
            borderWidth: 2
          }
        },
        // Zone optimale pour le stockage des pommes (85-95%) - Plus visible
        markArea: {
          silent: true,
          itemStyle: {
            color: 'rgba(34, 197, 94, 0.25)',
            borderColor: 'rgba(34, 197, 94, 0.8)',
            borderWidth: 2
          },
          data: [
            [
              {
                yAxis: 85,
                itemStyle: {
                  color: 'rgba(34, 197, 94, 0.25)'
                },
                label: {
                  show: true,
                  position: 'insideTop',
                  formatter: 'ZONE OPTIMALE\nPOMMES',
                  color: '#22C55E',
                  fontSize: 10,
                  fontWeight: 'bold',
                  backgroundColor: 'rgba(255, 255, 255, 0.9)',
                  borderColor: '#22C55E',
                  borderWidth: 1,
                  borderRadius: 6,
                  padding: [4, 8]
                }
              },
              {
                yAxis: 95,
                itemStyle: {
                  color: 'rgba(34, 197, 94, 0.25)'
                }
              }
            ]
          ]
        },
        // Lignes de r√©f√©rence pour l'humidit√© optimale des pommes - Plus visibles
        markLine: {
          silent: true,
          lineStyle: {
            color: '#16A34A',
            type: 'solid',
            width: 3
          },
          data: [
            {
              yAxis: 85,
              name: 'Min optimal pommes',
              lineStyle: {
                color: '#16A34A',
                type: 'solid',
                width: 3
              },
              label: {
                show: true,
                position: 'insideEndTop',
                formatter: '85% MIN',
                color: '#FFFFFF',
                fontSize: 9,
                fontWeight: 'bold',
                backgroundColor: '#16A34A',
                borderColor: '#FFFFFF',
                borderWidth: 1,
                borderRadius: 6,
                padding: [4, 8]
              }
            },
            {
              yAxis: 95,
              name: 'Max optimal pommes',
              lineStyle: {
                color: '#16A34A',
                type: 'solid',
                width: 3
              },
              label: {
                show: true,
                position: 'insideEndBottom',
                formatter: '95% MAX',
                color: '#FFFFFF',
                fontSize: 9,
                fontWeight: 'bold',
                backgroundColor: '#16A34A',
                borderColor: '#FFFFFF',
                borderWidth: 1,
                borderRadius: 6,
                padding: [4, 8]
              }
            }
          ]
        }
      },
       // Port status as stacked bar chart for humidity
       {
         name: 'Port Ferm√©',
         type: 'bar',
         data: data.map(d => [d.timestamp, d.magnet === 1 ? 1 : 0]),
         itemStyle: {
           color: '#10B981',
           opacity: 0.7
         },
         stack: 'port',
         barWidth: '80%',
         tooltip: {
           formatter: function(params: any) {
             if (params.data[1] === 0) return '';
             const date = new Date(params.data[0]);
             const time = date.toLocaleString('fr-FR', { 
               day: '2-digit', 
               month: '2-digit', 
               year: 'numeric', 
               hour: '2-digit', 
               minute: '2-digit',
               second: '2-digit'
             });
             return `üîí Port Ferm√©<br/>${time}`;
           }
         }
       },
       {
         name: 'Port Ouvert',
         type: 'bar',
         data: data.map(d => [d.timestamp, d.magnet === 0 ? 1 : 0]),
         itemStyle: {
           color: '#EF4444',
           opacity: 0.7
         },
         stack: 'port',
         barWidth: '80%',
         tooltip: {
           formatter: function(params: any) {
             if (params.data[1] === 0) return '';
             const date = new Date(params.data[0]);
             const time = date.toLocaleString('fr-FR', { 
               day: '2-digit', 
               month: '2-digit', 
               year: 'numeric', 
               hour: '2-digit', 
               minute: '2-digit',
               second: '2-digit'
             });
             return `üîì Port Ouvert<br/>${time}`;
           }
         }
       }
    ],
    // Timeline and zoom features for humidity
    dataZoom: [
      {
        type: 'slider',
        show: true,
        xAxisIndex: [0],
        start: 0,
        end: 100,
        height: 20,
        bottom: 15,
        backgroundColor: 'rgba(255, 255, 255, 0.8)',
        borderColor: '#E5E7EB',
        fillerColor: 'rgba(59, 130, 246, 0.2)',
        handleStyle: {
          color: '#3B82F6',
          borderColor: '#3B82F6'
        },
        textStyle: {
          color: '#6B7280',
          fontSize: 10
        }
      },
      {
        type: 'inside',
        xAxisIndex: [0],
        start: 0,
        end: 100
      }
    ]
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-1 sm:p-4">
      <div className="bg-white rounded-lg sm:rounded-2xl shadow-2xl max-w-7xl w-full max-h-[98vh] sm:max-h-[90vh] overflow-hidden mx-1 sm:mx-4 flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-3 sm:p-6 border-b border-gray-200 bg-gradient-to-r from-blue-50 to-indigo-50">
          <div className="flex items-center space-x-2 sm:space-x-3 min-w-0 flex-1">
            <div className="w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-lg sm:rounded-xl flex items-center justify-center flex-shrink-0">
              <span className="text-white text-sm sm:text-lg">üìä</span>
            </div>
            <div className="min-w-0 flex-1">
              <h2 className="text-lg sm:text-xl font-bold text-gray-900 truncate">Historique des Capteurs</h2>
              <p className="text-xs sm:text-sm text-gray-600 truncate">{sensorName}</p>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            {/* Live/Historical Toggle - REACTIVATED */}
            <button
              onClick={() => {
                setIsLiveMode(!isLiveMode);
                // Don't clear data when switching to live mode - keep historical data
                if (isLiveMode) {
                  console.log('üîÑ [SensorChart] Switching to historical mode');
                } else {
                  console.log('üîÑ [SensorChart] Switching to live mode - will load historical data first');
                }
              }}
              className={`w-7 h-7 sm:w-8 sm:h-8 rounded-full flex items-center justify-center transition-colors duration-200 flex-shrink-0 ${
                isLiveMode 
                  ? 'bg-green-100 hover:bg-green-200' 
                  : 'bg-gray-100 hover:bg-gray-200'
              }`}
              title={isLiveMode ? "Mode Live Actif" : "Basculer en mode Live"}
            >
              <div className={`w-2 h-2 rounded-full ${isLiveMode ? 'bg-green-500 animate-pulse' : 'bg-gray-400'}`} />
            </button>

            {/* Refresh Button (only in historical mode) */}
            {!isLiveMode && (
              <button
                onClick={debouncedRefresh}
                disabled={loading}
                className={`w-7 h-7 sm:w-8 sm:h-8 rounded-full flex items-center justify-center transition-colors duration-200 flex-shrink-0 ${
                  loading 
                    ? 'bg-gray-100 cursor-not-allowed' 
                    : 'bg-blue-100 hover:bg-blue-200'
                }`}
                title="Actualiser les donn√©es"
              >
                {loading ? (
                  <svg className="w-3 h-3 sm:w-4 sm:h-4 text-gray-400 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                ) : (
                  <svg className="w-3 h-3 sm:w-4 sm:h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                )}
              </button>
            )}
            {/* Close Button */}
            <button
              onClick={onClose}
              className="w-7 h-7 sm:w-8 sm:h-8 bg-gray-100 hover:bg-gray-200 rounded-full flex items-center justify-center transition-colors duration-200 flex-shrink-0"
            >
              <span className="text-gray-600 text-base sm:text-lg">√ó</span>
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="flex-1 p-2 sm:p-6 overflow-y-auto min-h-0">
          {/* Apple-inspired Date Range Selector */}
          <div className="mb-4 sm:mb-6 p-3 sm:p-5 bg-white/60 backdrop-blur-xl rounded-3xl border border-white/20 shadow-xl shadow-black/5">
            <div className="flex flex-col items-center space-y-3 sm:space-y-4">
              {/* Live Mode Status */}
              {isLiveMode ? (
                <div className="flex items-center space-x-2 px-4 py-2 bg-green-50 rounded-full border border-green-200">
                  <div className={`w-2 h-2 rounded-full ${mqttConnected ? 'bg-green-500 animate-pulse' : 'bg-red-500'}`} />
                  <span className="text-sm font-medium text-green-700">
                    {mqttConnected ? 'Mode temps r√©el' : 'Connexion...'}
                  </span>
                </div>
              ) : error && error.includes('MQTT') ? (
                <div className="flex items-center space-x-2 px-4 py-2 bg-yellow-50 rounded-full border border-yellow-200">
                  <div className="w-2 h-2 rounded-full bg-yellow-500" />
                  <span className="text-sm font-medium text-yellow-700">
                    Mode Historique (MQTT indisponible)
                  </span>
                </div>
              ) : (
                <>
                  {/* Quick Range Buttons - Apple-inspired Design */}
                  <div className="flex justify-center flex-wrap gap-1.5 sm:gap-2">
                <button
                  onClick={setLast30Minutes}
                  className={`px-3 sm:px-5 py-2 sm:py-2.5 text-xs sm:text-sm font-medium rounded-2xl transition-all duration-300 ease-out backdrop-blur-sm ${
                    isRangeSelected('30min')
                      ? 'bg-gradient-to-r from-blue-500 via-blue-600 to-indigo-600 text-white shadow-lg shadow-blue-500/25 transform scale-105 border border-blue-400/20'
                      : 'bg-white/80 text-slate-700 border border-slate-200/60 hover:bg-slate-50/90 hover:border-slate-300/80 hover:shadow-md hover:scale-102 active:scale-98'
                  }`}
                >
                  30min
                </button>
                <button
                  onClick={() => setQuickRange(1, '24h')}
                  className={`px-3 sm:px-5 py-2 sm:py-2.5 text-xs sm:text-sm font-medium rounded-2xl transition-all duration-300 ease-out backdrop-blur-sm ${
                    isRangeSelected('24h')
                      ? 'bg-gradient-to-r from-blue-500 via-blue-600 to-indigo-600 text-white shadow-lg shadow-blue-500/25 transform scale-105 border border-blue-400/20'
                      : 'bg-white/80 text-slate-700 border border-slate-200/60 hover:bg-slate-50/90 hover:border-slate-300/80 hover:shadow-md hover:scale-102 active:scale-98'
                  }`}
                >
                  24h
                </button>
                <button
                  onClick={() => setQuickRange(7, '7j')}
                  className={`px-3 sm:px-5 py-2 sm:py-2.5 text-xs sm:text-sm font-medium rounded-2xl transition-all duration-300 ease-out backdrop-blur-sm ${
                    isRangeSelected('7j')
                      ? 'bg-gradient-to-r from-blue-500 via-blue-600 to-indigo-600 text-white shadow-lg shadow-blue-500/25 transform scale-105 border border-blue-400/20'
                      : 'bg-white/80 text-slate-700 border border-slate-200/60 hover:bg-slate-50/90 hover:border-slate-300/80 hover:shadow-md hover:scale-102 active:scale-98'
                  }`}
                >
                  7j
                </button>
                <button
                  onClick={() => setQuickRange(30, '30j')}
                  className={`px-3 sm:px-5 py-2 sm:py-2.5 text-xs sm:text-sm font-medium rounded-2xl transition-all duration-300 ease-out backdrop-blur-sm ${
                    isRangeSelected('30j')
                      ? 'bg-gradient-to-r from-blue-500 via-blue-600 to-indigo-600 text-white shadow-lg shadow-blue-500/25 transform scale-105 border border-blue-400/20'
                      : 'bg-white/80 text-slate-700 border border-slate-200/60 hover:bg-slate-50/90 hover:border-slate-300/80 hover:shadow-md hover:scale-102 active:scale-98'
                  }`}
                >
                  30j
                </button>
                  </div>
                  
                  {/* Apple-style Divider */}
                  <div className="w-12 sm:w-16 h-px bg-gradient-to-r from-transparent via-slate-300/60 to-transparent"></div>
              
              {/* Custom Date Range - Centered */}
              <div className="flex flex-col sm:flex-row items-center gap-2 sm:gap-3">
                <div className="flex items-center gap-1 sm:gap-2">
                  <span className="text-slate-600 font-medium text-xs sm:text-sm">üìÖ Du:</span>
                  <input
                    type="date"
                    value={dateRange.start}
                    onChange={(e) => setDateRange(prev => ({ ...prev, start: e.target.value }))}
                    className="px-2 sm:px-3 py-1 sm:py-2 border border-slate-300 rounded-md sm:rounded-lg text-xs sm:text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white shadow-sm"
                  />
                </div>
                <span className="text-slate-400 hidden sm:block">‚Üí</span>
                <div className="flex items-center gap-1 sm:gap-2">
                  <span className="text-slate-600 font-medium text-xs sm:text-sm">üìÖ Au:</span>
                  <input
                    type="date"
                    value={dateRange.end}
                    onChange={(e) => setDateRange(prev => ({ ...prev, end: e.target.value }))}
                    className="px-2 sm:px-3 py-1 sm:py-2 border border-slate-300 rounded-md sm:rounded-lg text-xs sm:text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white shadow-sm"
                  />
                </div>
                </div>
                </>
              )}
            </div>
          </div>

          {loading && isInitialLoad && (
            <div className="flex items-center justify-center py-12 transition-opacity duration-300">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              <span className="ml-3 text-gray-600">Chargement des donn√©es...</span>
            </div>
          )}

          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
              <div className="flex items-center">
                <span className="text-red-500 text-xl mr-3">‚ö†Ô∏è</span>
                <div>
                  <h3 className="text-red-800 font-medium">Erreur de chargement</h3>
                  <p className="text-red-600 text-sm mt-1">{error}</p>
                </div>
              </div>
            </div>
          )}

          {!loading && !error && data.length === 0 && !isInitialLoad && (
            <div className="text-center py-12 transition-all duration-300">
              <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-gray-400 text-2xl">üìà</span>
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">Aucune donn√©e disponible</h3>
              <p className="text-gray-600">Aucune donn√©e de capteur trouv√©e pour cette p√©riode.</p>
            </div>
          )}

          {!loading && !error && data.length > 0 && (
            <div className="space-y-4 sm:space-y-8 transition-all duration-500 ease-in-out opacity-100">
              {/* Compact Summary Cards - Mobile Optimized */}
              <div className="grid grid-cols-2 lg:grid-cols-4 gap-2 sm:gap-3 mb-3 sm:mb-6">
                <div className="bg-gradient-to-r from-red-50 to-red-100 rounded-lg p-2 sm:p-3 border border-red-200">
                  <div className="flex items-center justify-between">
                    <div className="min-w-0 flex-1">
                      <p className="text-red-600 text-xs font-medium truncate">Temp</p>
                      <p className="text-sm sm:text-lg font-bold text-red-700">
                        {data.length > 0 ? data[data.length - 1].temperature.toFixed(1) : '0.0'}¬∞C
                      </p>
                      <p className="text-xs text-red-600 mt-0.5">
                        {data.length > 0 ? getTimeAgo(new Date(data[data.length - 1].timestamp)) : 'N/A'}
                      </p>
                    </div>
                    <span className="text-red-500 text-lg sm:text-xl flex-shrink-0 ml-1">üå°Ô∏è</span>
                  </div>
                </div>
                
                <div className="bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg p-2 sm:p-3 border border-blue-200">
                  <div className="flex items-center justify-between">
                    <div className="min-w-0 flex-1">
                      <p className="text-blue-600 text-xs font-medium truncate">Humidit√©</p>
                      <p className="text-sm sm:text-lg font-bold text-blue-700">
                        {data.length > 0 ? data[data.length - 1].humidity.toFixed(1) : '0.0'}%
                      </p>
                      <p className="text-xs text-blue-600 mt-0.5">
                        {data.length > 0 ? getTimeAgo(new Date(data[data.length - 1].timestamp)) : 'N/A'}
                      </p>
                    </div>
                    <span className="text-blue-500 text-lg sm:text-xl flex-shrink-0 ml-1">üíß</span>
                  </div>
                </div>
                
                <div className="bg-gradient-to-r from-purple-50 to-purple-100 rounded-lg p-2 sm:p-3 border border-purple-200">
                  <div className="flex items-center justify-between">
                    <div className="min-w-0 flex-1">
                      <p className="text-purple-600 text-xs font-medium truncate">Port</p>
                      <p className="text-sm sm:text-lg font-bold text-purple-700">
                        {data.length > 0 ? (data[data.length - 1].magnet === 1 ? 'Ferm√©' : 'Ouvert') : 'N/A'}
                      </p>
                      <p className="text-xs text-purple-600 mt-0.5">
                        {data.length > 0 ? getTimeAgo(new Date(data[data.length - 1].timestamp)) : 'N/A'}
                      </p>
                    </div>
                    <span className="text-purple-500 text-lg sm:text-xl flex-shrink-0 ml-1">
                      {data.length > 0 ? (data[data.length - 1].magnet === 1 ? 'üîí' : 'üîì') : '‚ùì'}
                    </span>
                  </div>
                </div>
                
                <div className="bg-gradient-to-r from-green-50 to-green-100 rounded-lg p-2 sm:p-3 border border-green-200">
                  <div className="flex items-center justify-between">
                    <div className="min-w-0 flex-1">
                      <p className="text-green-600 text-xs font-medium truncate">Batterie</p>
                      <p className="text-sm sm:text-lg font-bold text-green-700">
                        {data.length > 0 ? data[data.length - 1].battery.toFixed(1) : '0.0'}V
                      </p>
                      <p className="text-xs text-green-600 mt-0.5">
                        {data.length > 0 ? getTimeAgo(new Date(data[data.length - 1].timestamp)) : 'N/A'}
                      </p>
                    </div>
                    <span className="text-green-500 text-lg sm:text-xl flex-shrink-0 ml-1">üîã</span>
                  </div>
                </div>
              </div>

              {/* Separate Charts - Mobile Optimized */}
              <div className="grid grid-cols-1 xl:grid-cols-2 gap-2 sm:gap-6">
                {/* Temperature Chart */}
                <div className="bg-white rounded-lg sm:rounded-xl border border-gray-200 p-1 sm:p-4 shadow-sm transition-all duration-300 hover:shadow-lg">
                  <ReactECharts 
                    option={temperatureChartOption} 
                    style={{ height: '250px', width: '100%' }}
                    opts={{ renderer: 'canvas' }}
                    notMerge={true}
                  />
                  {/* Temperature Range Info - Small without icon */}
                  <div className="mt-1 sm:mt-2 p-1 sm:p-2 bg-gradient-to-r from-blue-50 to-blue-100 border border-blue-300 rounded-md sm:rounded-lg">
                    <div className="text-center">
                      <p className="text-xs font-bold text-blue-800">
                        ZONE OPTIMALE
                      </p>
                      <p className="text-xs text-blue-700 font-medium">
                        0¬∞C - 4¬∞C Temp√©rature
                      </p>
                    </div>
                  </div>
                </div>

                {/* Humidity Chart */}
                <div className="bg-white rounded-lg sm:rounded-xl border border-gray-200 p-1 sm:p-4 shadow-sm transition-all duration-300 hover:shadow-lg">
                  <ReactECharts 
                    option={humidityChartOption} 
                    style={{ height: '250px', width: '100%' }}
                    opts={{ renderer: 'canvas' }}
                    notMerge={true}
                  />
                  {/* Humidity Range Info - Small without icon */}
                  <div className="mt-1 sm:mt-2 p-1 sm:p-2 bg-gradient-to-r from-green-50 to-green-100 border border-green-300 rounded-md sm:rounded-lg">
                    <div className="text-center">
                      <p className="text-xs font-bold text-green-800">
                        ZONE OPTIMALE
                      </p>
                      <p className="text-xs text-green-700 font-medium">
                        85% - 95% Humidit√©
                      </p>
                    </div>
                  </div>
                </div>
              </div>

            </div>
          )}
          {/* Bottom padding for better mobile scrolling */}
          <div className="h-4 sm:h-6"></div>
        </div>
      </div>
    </div>
  );
};

export default SensorChart;